// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'types.freezed.dart';

// These types are ignored because they are not used by any `pub` functions: `AssetIdBTreeMapInt`, `AssetIdBTreeMapUInt`, `AssetIdHashMapInt`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `into`

/// Address class which contains both standard and confidential addresses with the address index in the wallet
@freezed
class Address with _$Address {
  const Address._();
  const factory Address({
    required String standard,
    required String confidential,
    required int index,
  }) = _Address;

  /// Create an address from a scriptpubkey. Always returns 0 as the index is only for wallet generated addresses
  static Future<Address> addressFromScript(
          {required Network network,
          required String script,
          required String blindingKey}) =>
      LwkCore.instance.api.crateApiTypesAddressAddressFromScript(
          network: network, script: script, blindingKey: blindingKey);

  /// Validate the address string and return the network
  static Future<Network> validate({required String addressString}) =>
      LwkCore.instance.api
          .crateApiTypesAddressValidate(addressString: addressString);
}

/// Balance represents a balance of a specific asset
@freezed
class Balance with _$Balance {
  const factory Balance({
    required String assetId,
    required PlatformInt64 value,
  }) = _Balance;
}

class Blockchain {
  const Blockchain();

  Future<void> test({required String electrumUrl}) => LwkCore.instance.api
      .crateApiTypesBlockchainTest(that: this, electrumUrl: electrumUrl);

  @override
  int get hashCode => 0;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Blockchain && runtimeType == other.runtimeType;
}

enum Network {
  mainnet,
  testnet,
  ;
}

@freezed
class OutPoint with _$OutPoint {
  const factory OutPoint({
    required String txid,
    required int vout,
  }) = _OutPoint;
}

/// Decoded PSET amounts
class PsetAmounts {
  final BigInt absoluteFees;
  final List<Balance> balances;

  const PsetAmounts({
    required this.absoluteFees,
    required this.balances,
  });

  @override
  int get hashCode => absoluteFees.hashCode ^ balances.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PsetAmounts &&
          runtimeType == other.runtimeType &&
          absoluteFees == other.absoluteFees &&
          balances == other.balances;
}

/// Transaction object returned by getTransactions.
@freezed
class Tx with _$Tx {
  const factory Tx({
    int? timestamp,
    required String kind,
    required List<Balance> balances,
    required String txid,
    required List<TxOut> outputs,
    required List<TxOut> inputs,
    required BigInt fee,
    int? height,
    required String unblindedUrl,
    required BigInt vsize,
  }) = _Tx;
}

@freezed
class TxOut with _$TxOut {
  const factory TxOut({
    required String scriptPubkey,
    required OutPoint outpoint,
    int? height,
    required TxOutSecrets unblinded,
  }) = _TxOut;
}

@freezed
class TxOutSecrets with _$TxOutSecrets {
  const factory TxOutSecrets({
    required BigInt value,
    required String valueBf,
    required String asset,
    required String assetBf,
  }) = _TxOutSecrets;
}
